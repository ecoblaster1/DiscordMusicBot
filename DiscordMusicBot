const queue = new Map();

const execute = async (message, serverQueue) => {
  const args = message.content.split(" ");

  const voiceChannel = message.member.voice.channel;
  if (!voiceChannel)
    return message.channel.send(
      "You need to be in a voice channel to play music!"
    );
  const permissions = voiceChannel.permissionsFor(message.client.user);
  if (!permissions.has("CONNECT") || !permissions.has("SPEAK")) {
    return message.channel.send(
      "I need the permissions to join and speak in your voice channel!"
    );
  }

  const songInfo = await ytdl.getInfo(args[1]);
  const song = {
    title: songInfo.title,
    url: songInfo.video_url,
    // You can add more properties if you want to
  };

  if (!serverQueue) {
    const queueConstructor = {
      voiceChannel: voiceChannel,
      textChannel: message.channel,
      connection: null,
      songs: [],
      volume: 5,
      playing: true,
    };

    queue.set(message.guild.id, queueConstructor);

    queueConstructor.songs.push(song);

    try {
      var connection = await voiceChannel.join();
      queueConstructor.connection = connection;
      play(message.guild, queueConstructor.songs[0]);
    } catch (err) {
      console.log(err);
      queue.delete(message.guild.id);
      return message.channel.send(err);
    }
  } else {
    serverQueue.songs.push(song);
    return message.channel.send(`${song.title} has been added to the queue!`);
  }
};

const play = async (guild, song) => {
  const serverQueue = queue.get(guild.id);

  if (!song) {
    serverQueue.voiceChannel.leave();
    queue.delete(guild.id);
    return;
  }

  const stream = ytdl(song.url, { filter: "audioonly" });
  const connection = await guild.voice.connections.first().createMediaStreamSource(stream);

  const player = connection.play(stream);

  player.on("finish", () => {
    serverQueue.songs.shift();
    play(guild, serverQueue.songs[0]);
  });
  player.on("error", (error) => {
    console.error(error);
    serverQueue.songs.shift();
    play(guild, serverQueue.songs[0]);
  });
};

client.on("message", async (message) => {
  if (message.author.bot || !message.guild) return;

  if (message.content.startsWith(prefix)) {
    const args = message.content.slice(prefix.length).trim().split(/ +/g);
    const command = args.shift().toLowerCase();

    if (command === "play") {
      execute(message, queue.get(message.guild.id));
    } else if (command === "skip") {
      if (!serverQueue)
        return message.channel.send("There is no song currently playing!");
      serverQueue.connection.dispatcher.end();
    }
  }
});
